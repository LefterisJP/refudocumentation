#+FILETAGS: REFULANG

Notes about the intermediate representation format for refu.
Its codename is irf.


* Introduction
The intermediate representation of refu is the result of the compiling phase. It's what's created after a file is parsed and processed
and is also what's fed to the subsequent levels of processing such as the backend.

* Specification
Each source files corresponds to one irf object. One irf object can have many
functions and each function has its own stack and address space.

** Function definition
A functiondef defines a function. A function is what all programs are organized in.
A function is comprised of a return type, argument types and a body. A body is a basic block.
#+BEGIN_EXAMPLE
functiondef(name, arguments_types, return type, body)
#+END_EXAMPLE

** Functioncall
a functioncall defines a call to a named function of a module
#+BEGIN_EXAMPLE
functioncall(name, argument1, ..., argumentN)
#+END_EXAMPLE

** Typedef
Typedef defines a new type. A type is defined just like in the normal spec of the language but
this is the rir_type seen in the code.
#+BEGIN_EXAMPLE
typedef(name, category, subtype1, ..., subtypeN)
#+END_EXAMPLE

** Basic Block 
A basic block contains a series of expressions and statements to be executed without any branching.
It always contains one entry point and one exit point.

** Branch
It's what is used to transfer control to a different basic block in the same function
#+BEGIN_EXAMPLE
branch(to_branch)
#+END_EXAMPLE

** Conditional branch
Just like branch but with a condition. If the condition is true the control flow is transferred to one basic block, and if false to another.
#+BEGIN_EXAMPLE
condbranch(condition, true_branch, false_branch)
#+END_EXAMPLE

** Operations

*** add(a, b)

*** sub(a, b)

*** mul(a, b)

*** div(a, b)
